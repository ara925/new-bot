// frontend/src/components/settings/PreferencesForm.tsx
import React, { useState, useEffect } from 'react';
import { api } from '../../utils/api';

interface UserPreferences {
  defaultAiModel: string;
  defaultArticleStyle: string;
  defaultLanguage: string;
  defaultTone: string;
  autoSave: boolean;
}

interface PreferencesFormProps {
  onSaved?: () => void;
}

const PreferencesForm: React.FC<PreferencesFormProps> = ({ onSaved }) => {
  const [preferences, setPreferences] = useState<UserPreferences>({
    defaultAiModel: 'gpt4',
    defaultArticleStyle: 'informative',
    defaultLanguage: 'English',
    defaultTone: 'informative',
    autoSave: true
  });
  
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  
  // AI model options
  const aiModels = [
    { value: 'gpt4', label: 'GPT-4o (Best quality)' },
    { value: 'claude', label: 'Claude Sonnet 3.7' },
    { value: 'llama', label: 'Meta LLaMA 3.3 70B' }
  ];

  // Article style options
  const articleStyles = [
    { value: 'informative', label: 'Informative' },
    { value: 'guide', label: 'Guide' },
    { value: 'how-to', label: 'How-to' },
    { value: 'tutorial', label: 'Tutorial' },
    { value: 'listicle', label: 'Listicle' },
    { value: 'review', label: 'Review' }
  ];

  // Language options
  const languages = [
    { value: 'English', label: 'English' },
    { value: 'Spanish', label: 'Spanish' },
    { value: 'French', label: 'French' },
    { value: 'German', label: 'German' },
    { value: 'Italian', label: 'Italian' },
    { value: 'Portuguese', label: 'Portuguese' }
  ];

  // Tone options
  const tones = [
    { value: 'informative', label: 'Informative' },
    { value: 'friendly', label: 'Friendly' },
    { value: 'professional', label: 'Professional' },
    { value: 'casual', label: 'Casual' },
    { value: 'enthusiastic', label: 'Enthusiastic' },
    { value: 'scientific', label: 'Scientific' }
  ];

  // Fetch user preferences
  useEffect(() => {
    const fetchPreferences = async () => {
      try {
        setLoading(true);
        const response = await api.getUserPreferences();
        
        if (response.data.data) {
          setPreferences(prev => ({
            ...prev,
            ...response.data.data
          }));
        }
      } catch (error) {
        console.error('Error fetching preferences:', error);
        setError('Failed to load preferences');
      } finally {
        setLoading(false);
      }
    };

    fetchPreferences();
  }, []);

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setSaving(true);
      setError(null);
      setSuccessMessage(null);
      
      await api.updateUserPreferences(preferences);
      
      setSuccessMessage('Preferences saved successfully');
      
      if (onSaved) {
        onSaved();
      }
    } catch (error) {
      console.error('Error saving preferences:', error);
      setError('Failed to save preferences');
    } finally {
      setSaving(false);
    }
  };

  // Handle input changes
  const handleChange = (e: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    
    setPreferences({
      ...preferences,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  if (loading) {
    return (
      <div className="flex justify-center py-6">
        <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        </div>
      )}

      {successMessage && (
        <div className="bg-green-50 border-l-4 border-green-500 p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
            </div>